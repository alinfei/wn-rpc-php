<?php
namespace com\weinong\user\rpc\bean;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class WeixinUserInfo4Rpc {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $open_id = null;
  /**
   * @var string
   */
  public $nick_name = null;
  /**
   * @var int
   */
  public $sex = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $province = null;
  /**
   * @var string
   */
  public $country = null;
  /**
   * @var string
   */
  public $head_img_url = null;
  /**
   * @var string
   */
  public $privilege = null;
  /**
   * @var string
   */
  public $union_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'open_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nick_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'head_img_url',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'privilege',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'union_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['open_id'])) {
        $this->open_id = $vals['open_id'];
      }
      if (isset($vals['nick_name'])) {
        $this->nick_name = $vals['nick_name'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['head_img_url'])) {
        $this->head_img_url = $vals['head_img_url'];
      }
      if (isset($vals['privilege'])) {
        $this->privilege = $vals['privilege'];
      }
      if (isset($vals['union_id'])) {
        $this->union_id = $vals['union_id'];
      }
    }
  }

  public function getName() {
    return 'WeixinUserInfo4Rpc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->open_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nick_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->head_img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->privilege);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->union_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeixinUserInfo4Rpc');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->open_id !== null) {
      $xfer += $output->writeFieldBegin('open_id', TType::STRING, 2);
      $xfer += $output->writeString($this->open_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nick_name !== null) {
      $xfer += $output->writeFieldBegin('nick_name', TType::STRING, 3);
      $xfer += $output->writeString($this->nick_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 4);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 5);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 6);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 7);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->head_img_url !== null) {
      $xfer += $output->writeFieldBegin('head_img_url', TType::STRING, 8);
      $xfer += $output->writeString($this->head_img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privilege !== null) {
      $xfer += $output->writeFieldBegin('privilege', TType::STRING, 9);
      $xfer += $output->writeString($this->privilege);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->union_id !== null) {
      $xfer += $output->writeFieldBegin('union_id', TType::STRING, 10);
      $xfer += $output->writeString($this->union_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserInfo4Rpc {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $create_time = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $idcard = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var string
   */
  public $inited = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'create_time',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'idcard',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'inited',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['idcard'])) {
        $this->idcard = $vals['idcard'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['inited'])) {
        $this->inited = $vals['inited'];
      }
    }
  }

  public function getName() {
    return 'UserInfo4Rpc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idcard);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inited);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInfo4Rpc');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 2);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 4);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idcard !== null) {
      $xfer += $output->writeFieldBegin('idcard', TType::STRING, 6);
      $xfer += $output->writeString($this->idcard);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 7);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inited !== null) {
      $xfer += $output->writeFieldBegin('inited', TType::STRING, 8);
      $xfer += $output->writeString($this->inited);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Device4Rpc {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $device_code = null;
  /**
   * @var string
   */
  public $device_name = null;
  /**
   * @var int
   */
  public $device_index = null;
  /**
   * @var string
   */
  public $refresh_time = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $create_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'device_code',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'device_index',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'refresh_time',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'create_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['device_code'])) {
        $this->device_code = $vals['device_code'];
      }
      if (isset($vals['device_name'])) {
        $this->device_name = $vals['device_name'];
      }
      if (isset($vals['device_index'])) {
        $this->device_index = $vals['device_index'];
      }
      if (isset($vals['refresh_time'])) {
        $this->refresh_time = $vals['refresh_time'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
    }
  }

  public function getName() {
    return 'Device4Rpc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->device_index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refresh_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Device4Rpc');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_code !== null) {
      $xfer += $output->writeFieldBegin('device_code', TType::STRING, 3);
      $xfer += $output->writeString($this->device_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_name !== null) {
      $xfer += $output->writeFieldBegin('device_name', TType::STRING, 4);
      $xfer += $output->writeString($this->device_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_index !== null) {
      $xfer += $output->writeFieldBegin('device_index', TType::I32, 5);
      $xfer += $output->writeI32($this->device_index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refresh_time !== null) {
      $xfer += $output->writeFieldBegin('refresh_time', TType::STRING, 6);
      $xfer += $output->writeString($this->refresh_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 8);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WeixinBindOpenid4Rpc {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $appid = null;
  /**
   * @var string
   */
  public $openid = null;
  /**
   * @var string
   */
  public $create_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'appid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'openid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'create_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['openid'])) {
        $this->openid = $vals['openid'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
    }
  }

  public function getName() {
    return 'WeixinBindOpenid4Rpc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->openid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeixinBindOpenid4Rpc');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::STRING, 3);
      $xfer += $output->writeString($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->openid !== null) {
      $xfer += $output->writeFieldBegin('openid', TType::STRING, 4);
      $xfer += $output->writeString($this->openid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 5);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


